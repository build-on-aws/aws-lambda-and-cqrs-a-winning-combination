AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: |
  Example infrastructure as code for different approaches of deploying CQRS architecture on top of AWS Lambda.

  Approach #1: Commands and Queries Dispatchers

  This example covers a refined approach when we have monolithic dispatchers, but separately for commands and queries.
  We start to split the implementation across multiple functions, and start to share the common implementation through
  AWS Lambda Layers, so thanks to that the commonalities and shared modules for business logic stays the same. In terms
  of adapter implementation, we pretty much have the same code - but it's shared now.

Globals:

  Function:
    Timeout: 15
    Tracing: Active

  Api:
    TracingEnabled: true

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Software Development Life Cycle (SDLC)"
        Parameters:
          - Stage

    ParameterLabels:
      Stage:
        default: "Name of the software development life cycle (SDLC) stage into which we are deploying."

Parameters:

  Stage:
    Type: String
    Description: Name of the environment where the infrastructure will be deployed.
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev

Resources:

  LibrarySystemDatabase:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: library-system-database
      KeySchema:
        - AttributeName: resourceId
          KeyType: HASH
        - AttributeName: subResourceId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: resourceId
          AttributeType: S
        - AttributeName: subResourceId
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: subType
          AttributeType: S
        # ... and the rest of non-key attributes:
        #
        # - AttributeName: name
        #   AttributeType: S
        # - AttributeName: email
        #   AttributeType: S
        # - AttributeName: birthdate
        #   AttributeType: S
        # - AttributeName: status
        #   AttributeType: S
        # - AttributeName: comment
        #   AttributeType: S
        # - AttributeName: created_at
        #   AttributeType: S
        # - AttributeName: updated_at
        #   AttributeType: S
        # - AttributeName: title
        #   AttributeType: S
        # - AttributeName: isbn
        #   AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: entity-type
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: subType
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ContributorInsightsSpecification:
            Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ContributorInsightsSpecification:
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      DeletionProtectionEnabled: false

  LibrarySystemAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  LibrarySystemCommonLayer:
    Type: AWS::Serverless::LayerVersion
    Metadata:
      BuildMethod: makefile
    Properties:
      ContentUri: layers/library-system-common/
      CompatibleRuntimes:
        - nodejs18.x
      RetentionPolicy: Delete

  CommandsDispatcher:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External:
          - library-system-common
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/handler.ts
    Properties:
      CodeUri: library/
      Handler: handler.commands
      Layers:
        - !Ref LibrarySystemCommonLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LibrarySystemDatabase
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:DescribeTable"
                - "dynamodb:PutItem"
                - "dynamodb:GetItem"
                - "dynamodb:UpdateItem"
                - "dynamodb:DeleteItem"
                - "dynamodb:ConditionCheckItem"
              Resource:
                - !GetAtt LibrarySystemDatabase.Arn
            - Effect: Allow
              Action:
                - "dynamodb:DescribeLimits"
                - "dynamodb:Query"
              Resource:
                - !GetAtt LibrarySystemDatabase.Arn
                - !Sub "${LibrarySystemDatabase.Arn}/index/entity-type"
      Events:
        CreateAuthor:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /author
            Method: POST
        UpdateAuthor:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /author/{id}
            Method: PUT
        DeleteAuthor:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /author/{id}
            Method: DELETE
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /user
            Method: POST
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /user/{id}
            Method: PUT
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /user/{id}
            Method: DELETE
        CreateBook:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book
            Method: POST
        UpdateBook:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/{id}
            Method: PUT
        DeleteBook:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/{id}
            Method: DELETE

  QueriesDispatcher:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        External:
          - library-system-common
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/handler.ts
    Properties:
      CodeUri: library/
      Handler: handler.queries
      Layers:
        - !Ref LibrarySystemCommonLayer
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref LibrarySystemDatabase
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - "dynamodb:DescribeTable"
                - "dynamodb:GetItem"
                - "dynamodb:ConditionCheckItem"
              Resource:
                - !GetAtt LibrarySystemDatabase.Arn
            - Effect: Allow
              Action:
                - "dynamodb:DescribeLimits"
                - "dynamodb:Query"
              Resource:
                - !GetAtt LibrarySystemDatabase.Arn
                - !Sub "${LibrarySystemDatabase.Arn}/index/entity-type"
      Events:
        GetAllAuthors:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /author
            Method: GET
        GetAuthorById:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /author/{id}
            Method: GET
        GetAllUsers:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /user
            Method: GET
        GetUserById:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /user/{id}
            Method: GET
        GetAllBooks:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book
            Method: GET
        GetBookById:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/{id}
            Method: GET

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:

  LibrarySystemApiURL:
    Description: Amazon API Gateway endpoint URL for a given stage.
    Value: !Sub "https://${LibrarySystemAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
