AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: |
  Example infrastructure as code for different approaches of deploying CQRS architecture on top of AWS Lambda.

  Approach #0: Monolithic Dispatcher

  This example covers an approach called a monolithic dispatcher, where the core of the business logic stays the same
  and it is deployed in a "Lambdalith" and adapter code is responsible for dispatching a correct part of the code.

Globals:

  Function:
    Timeout: 15
    Tracing: Active

  Api:
    TracingEnabled: true

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Software Development Life Cycle (SDLC)"
        Parameters:
          - Stage

    ParameterLabels:
      Stage:
        default: "Name of the software development life cycle (SDLC) stage into which we are deploying."

Parameters:

  Stage:
    Type: String
    Description: Name of the environment where the infrastructure will be deployed.
    AllowedValues:
      - dev
      - test
      - prod
    Default: dev

Resources:

  LibrarySystemDatabase:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: library-system-database
      KeySchema:
        - AttributeName: resourceId
          KeyType: HASH
        - AttributeName: subResourceId
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: resourceId
          AttributeType: S
        - AttributeName: subResourceId
          AttributeType: S
        - AttributeName: type
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        # ... and the rest of non-key attributes:
        #
        # - AttributeName: name
        #   AttributeType: S
        # - AttributeName: birthdate
        #   AttributeType: S
        # - AttributeName: email
        #   AttributeType: S
        # - AttributeName: birthdate
        #   AttributeType: S
        # - AttributeName: comment
        #   AttributeType: S
        # - AttributeName: createdAt
        #   AttributeType: S
        # - AttributeName: updatedAt
        #   AttributeType: S
        # - AttributeName: title
        #   AttributeType: S
        # - AttributeName: isbn
        #   AttributeType: S
      GlobalSecondaryIndexes:
        - IndexName: entity-type
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: subResourceId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ContributorInsightsSpecification:
            Enabled: true
        - IndexName: entity-status
          KeySchema:
            - AttributeName: type
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
          ContributorInsightsSpecification:
            Enabled: true
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      ContributorInsightsSpecification:
        Enabled: true
      BillingMode: PAY_PER_REQUEST
      TableClass: STANDARD
      DeletionProtectionEnabled: false

  LibrarySystemAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage

  MonolithicDispatcher:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
          - src/entrypoint.ts
    Properties:
      CodeUri: library/
      Handler: entrypoint.main
      Runtime: nodejs20.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: monolithic-dispatcher
          POWERTOOLS_METRICS_NAMESPACE: library-system/approach-00
          POWERTOOLS_LOG_LEVEL: INFO
          DYNAMODB_TABLE_NAME: !Ref LibrarySystemDatabase
      Policies:
        - Statement:
          - Effect: Allow
            Action:
              - "dynamodb:DescribeTable"
              - "dynamodb:PutItem"
              - "dynamodb:GetItem"
              - "dynamodb:UpdateItem"
              - "dynamodb:DeleteItem"
              - "dynamodb:ConditionCheckItem"
            Resource:
              - !GetAtt LibrarySystemDatabase.Arn
          - Effect: Allow
            Action:
              - "dynamodb:DescribeLimits"
              - "dynamodb:Query"
            Resource:
              - !GetAtt LibrarySystemDatabase.Arn
              - !Sub "${LibrarySystemDatabase.Arn}/index/entity-type"
      Events:
        AddNewBookCommand:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/new
            Method: POST
        BorrowBookCommand:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/{bookId}/borrow/{userId}
            Method: POST
        ReportBookAsMissingCommand:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/{bookId}/missing/{userId}
            Method: POST
        GetBooksByAuthorQuery:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/by-author/{authorId}
            Method: GET
        GetBorrowedBooksForUserQuery:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book/by-user/{userId}
            Method: GET
            RequestParameters:
              - method.request.querystring.status:
                  Required: true
        GetMissingBooksQuery:
          Type: Api
          Properties:
            RestApiId: !Ref LibrarySystemAPI
            Path: /book
            Method: GET
            RequestParameters:
              - method.request.querystring.status:
                  Required: true

  ApplicationResourceGroup:
    Type: AWS::ResourceGroups::Group
    Properties:
      Name: !Sub "ApplicationInsights-SAM-${AWS::StackName}"
      ResourceQuery:
        Type: CLOUDFORMATION_STACK_1_0

  ApplicationInsightsMonitoring:
    Type: AWS::ApplicationInsights::Application
    Properties:
      ResourceGroupName: !Ref ApplicationResourceGroup
      AutoConfigurationEnabled: true

Outputs:

  LibrarySystemApiURL:
    Description: Amazon API Gateway endpoint URL for a given stage.
    Value: !Sub "https://${LibrarySystemAPI}.execute-api.${AWS::Region}.amazonaws.com/${Stage}"
